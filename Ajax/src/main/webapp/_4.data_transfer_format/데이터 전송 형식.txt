데이터 전송 형식
	- 서버와 클라이언트가 데이터를 주고 받을 때는 특정한 형식을 맞춰야 합니다.
	- 자주 사용하는 파일 형식인 CSV, XML ,JSON 형식을 살펴봅시다.

1.	CSV(Comma Separated Values)
	예) 홍 길동, 서울시, 25세
		신사임당, 울산시, 45세
		
	장단점)
		- 다른 형식에 비해 굉장히 짦아서 많은 양의 데이터를 전송할 때 활용하면 좋습니다.
		- 데이터의 가동석잉 떨어ㅈ비니다. 각각의 데이터가 무엇을 의미하는지 알기 어렵습니다.
			예) 홍 길동이 책의 저자인지 책을 번역한 사람인지 등등

2.	XML 형식
	- CSV 형식은 각각의 데이터가 무엇을 나타내는지 알기 힘듭니다.
	- XML 형식은 HTML 형식처럼 태그로 데이터를 표현합니다.
	- XML (Extensible Markup Language)은 W3C에서 다른 특수 목적의 마크업 언어를 만드는 용도에서
			권장되는 다목적 마크업 언어입니다.
	
	예)
	<friends>
		<friend>
		 <name>홍 길동</name>
		 <loc>서울시</loc>
		 <age>25세</age>
		</friend>
		<friend>
		 <name>신사임당</name>
		 <loc>울산시</loc>
		 <age>45세</age>
		</friend>
	</friends>
	
	장점)
		- 가동성이 좋습니다.
		- XML은 모든 플랫폼에서 독장하며 여러 가지 다른 종류의 애플리케이션 사이의 데이터 전송에 적합합니다.
	단점)
		- 용량이 크며 데이터의 양이 커지면 분석 속도가 떨어집니다.
		- 결과를 처리하기 위해 많은 양의 코드를 작성해야 합니다.

3. JSON(JavaScript Object Notation)은 자바스크립트에서 사용하는 객체 형태로 데이터를 표현하는 방법이며
	Ajax를 사용할 때 거의 표준으로 사용되는 데이터 표현 방식입니다.
	- 문자열은 무조건 큰 따옴표(")를 사용합니다. 작은 따옴표(')는 안됩니다.
	- JSON은 키와 값을 쌍으로 가지는 구조입니다.
	- 각 키/값의 쌍은 콤마로 구분합니다.
	- 배열을 사용할 때는 대괄호([])안에 중괄호({})를 사용하여 조합합니다.
	예) 두개의 객체(리터널 {} 사용)를 배열 리터널 []를 이용해 저장합니다.
	[
		{
		 "name" : "홍 길동",
		 "loc"	: "서울시" ,
		 "age"	: "25세"
		},
		{
		 "name	: "신사임당",
		 "loc"	: "울산시" ,
		 "age"	: "45세"
		}
	]	
	장점)
		- 데이터의 가독성이 좋습니다.
		- HTML/XML보다는 간결합니다.
	단점)
		- 데이터의 양이 엄청나게 많아지면 데이터 추출 속도가 현저하게 떨어집니다.
		- 문법에 예민해서 문법에 맞지 않으면 전체를 처리하지 못하게 됩니다.